{% extends 'frontoffice/base.html.twig' %}

{% block title %}list location voiture{% endblock %}


{% block body %}

<h1 style="margin-top:100px;">Liste des Location voitures</h1>


<form id = "searchForm">
    <div class="row">
        <div class="col-md-3">
            <input type="text" class="form-control mb-3" name="type" placeholder="Type">
        </div>
        <div class="col-md-3">
            <input type="text" class="form-control mb-3" name="marque" placeholder="Marque">
        </div>
        <div class="col-md-2">
            <input type="number" class="form-control mb-3" name="maxPrix" placeholder="Max Prix">
        </div>
        <div class="col-md-2">
            <input type="number" class="form-control mb-3" name="minPrix" placeholder="Min Prix">
        </div>
        <div class="col-md-2">
            <button type="submit" class="btn btn-primary">Search</button>
        </div>
    </div>
</form>

<div class="text-center">
    <a href="{{ path('app_listReserved_user') }}" class="btn btn-primary my-3"> Mes voitures réservés </a>
</div>


<br>
<table border="1" class="table table-striped table-bordered">
    <thead id="table-header" class="thead-dark">

    </thead>
    <tbody id="table-centent">

    </tbody>
</table>


<br>
<br>
<br>
<br>
<br>
<br>
<br>
<link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.5.1/css/all.min.css" integrity="sha512-DTOQO9RWCH3ppGqcWaEA1BIZOC6xxalwEsw9c2QQeAIftl+Vegovlnee1c9QX4TctnWMn13TZye+giMm8e2LwA==" crossorigin="anonymous" referrerpolicy="no-referrer" />
<script>
    let tableData = [];
    document.addEventListener('DOMContentLoaded', async function() {
        let response = await fetch("{{path('app_searchLocationVoiture_user')}}");
        tableData = await response.json();
        //update the table to include the emptyTable below
        updateTable(Object.entries(tableData));
    });

    const emptyTableHeader = `
        <tr>
            <th id="prix" class="cursor-pointer" data-ascend-order="0"  onclick="sortField(event, 'prix')" >
                Prix Par Jour ($)
                <i class=""></i>
            </th>
            <th id="dateDebut" class="cursor-pointer" data-ascend-order="0" onclick="sortField(event, 'dateDebut')">
                Date Debut
                <i class=""></i>
            </th>
            <th id="datefin" class="cursor-pointer" data-ascend-order="0" onclick="sortField(event, 'datefin')">
                Date Fin
                <i class=""></i>
            </th>
            <th id="type" class="cursor-pointer" data-ascend-order="0"  onclick="sortField(event, 'type')">
                Type
                <i class=""></i>
            </th>
            <th id="status" class="cursor-pointer" data-ascend-order="0"  onclick="sortField(event, 'status')">
                Status
                <i class=""></i>
            </th>
            <th id="voiture" class="cursor-pointer" data-ascend-order="0"  onclick="sortField(event, 'voiture')">
                Voiture
                <i class=""></i>
            </th>
            <th>
                Action
            </th>
        </tr>
    </thead>
    `;

    function sortField(e, field){
        let element = e.target;
        newOrder = element.dataset.ascendOrder == 0 ? 1 : 0;
        updateTable(sortTableData(field, newOrder));
        
        let newCreatedField = document.getElementById(field);
        newCreatedField.dataset.ascendOrder = newOrder;
        if (newOrder){
            newCreatedField.querySelector("i").className = "fas fa-arrow-up";
        }else{
            newCreatedField.querySelector("i").className = "fas fa-arrow-down";
        }
    }

    function sortTableData(field, ascendOrder){
        let sortedArr = Object.entries(tableData);
        sortedArr.sort(function(a, b) {
            let valueA = a[1][field];
            let valueB = b[1][field];
            if (typeof valueA === 'string' && typeof valueB === 'string') {
                if (ascendOrder){
                    return valueA.localeCompare(valueB);
                } else {
                    return valueB.localeCompare(valueA);
                }
            } else if (typeof valueA === 'number' && typeof valueB === 'number') {
                if (ascendOrder){
                    return valueA - valueB;
                } else {
                    return valueB - valueA;
                }
            } else if (valueA != null && valueB != null && valueA.date != undefined && valueB.date != undefined){
                if (ascendOrder){
                    return (new Date(valueA.date)).getTime() - (new Date(valueB.date)).getTime();
                } else {
                    return (new Date(valueB.date)).getTime() - (new Date(valueA.date)).getTime();
                }
            } else {
                return 0;
            }
        });

        return sortedArr;
    }

    document.getElementById('searchForm').addEventListener('submit', searchSubmit);
    async function searchSubmit(e) {
        e.preventDefault();
        let formData = new FormData(this);
        //remove empty inputs
        let filteredFormData = new FormData();
        for (let pair of formData.entries()) {
            if (pair[1] !== '') {
                filteredFormData.append(pair[0], pair[1]);
            }
        }
        //send request
        let response = await fetch("{{path('app_searchLocationVoiture_user')}}"+ '?' + new URLSearchParams(filteredFormData).toString());
        let json = await response.json();
        tableData = json;
        updateTable(Object.entries(json))
    }
    function updateTable(jsonArray){
        let tableHeader = document.getElementById("table-header");
        let tableContent = document.getElementById("table-centent");
        tableHeader.innerHTML = emptyTableHeader;
        tableContent.innerHTML = "";
        
        for(i in jsonArray){
            let id = jsonArray[i][0];
            let data = jsonArray[i][1];
            tableContent.innerHTML += `
                <tr>
                    <td>${data.prix}</td>
                    <td>${data.dateDebut == null ? "": formatDate(new Date(data.dateDebut.date))}</td>
                    <td>${data.datefin == null ? "": formatDate(new Date(data.datefin.date))}</td>
                    <td>${data.type}</td>
                    <td>${data.status}</td>
                    <td>${data.voiture}</td>
                    <td>
                        <a class="btn btn-primary" href = "${'/locationVoiture/reserve/' + id}"> Réserver </a>
                    </td>
                </tr>
            `;
        } 
    }

    function formatDate(date) {
        let options = { 
            year: 'numeric', 
            month: 'long', 
            day: 'numeric', 
            hour: 'numeric', 
            minute: 'numeric',
            hour12: false
        };
        let formattedDate = date.toLocaleString('en-US', options);
        
        // Check if hour is 0 (midnight) and replace it with 00
        if (date.getHours() === 0) {
            formattedDate = formattedDate.replace(/(\d{1,2}:\d{2})/, '00:00');
        }
        
        return formattedDate;
    }
</script>

{% endblock %}